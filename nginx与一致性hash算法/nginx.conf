# nginx   2622 (13: Permission denied)  错误需要配置user root
user  root;
#全局配置区：worker_processes表示worker进程数，根据硬件调整，通常等于CPU数量或者2倍于CPU
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

# events 配置nginx的连接特性
events {
	# 一个worker同时最大可以支持1024个连接
    worker_connections  1024;
}

# http配置段
http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
	
# ====================================基于ip的虚拟主机配置=============================================	
	
	# leodaxin config
	server{
		# 监听端口
		listen		80;
		# 监听域名
		server_name leodaxin.com;
		
		location / {
			# 可以写相对路径，相对于nginx的根目录,注意：root的leodaxin.com是一个文件夹不是域名
			root leodaxin.com; 
			index daxin.html;
		}
	}
	
		server{
		# 监听端口
		listen		80;
		# 监听域名，会根据请求的域名进行匹配
		server_name node;		
		access_log  logs/node/node.access.log  main;
		
		location / {
			# 可以写相对路径，相对于nginx的根目录
			root node;
			index node.html;
		}
	}
	
		upstream tomcats{
			server node:8080 fail_timeout=20s  max_fails=3 weight=1;
			server node:8082 fail_timeout=20s  max_fails=3 weight=1;
		}
	
		server{
		listen		8080;
		server_name node;		
		access_log  logs/spring_boot_8080.access.log  main;
		}
	
		server{
		listen		8082;
		server_name node;		
		access_log  logs/spring_boot_8082.access.log  main;
		}
	
	# 配置tomcat
		server{
		# 监听端口
		listen		8081;
		# 监听域名，会根据请求的域名进行匹配
		server_name node;		
		
		location / {
		# 为了让服务器端获取真正的客户端ip地址
			proxy_set_header        Host  $host;
			proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://tomcats;
			expires                 0;
		}
	}
	

	# 当用户以ip地址访问时候回返回ip目录下的ip.html
		server{
		# 监听端口
		listen		80;
		# 监听域名，会根据请求的域名进行匹配
		server_name 192.168.53.131;
		
		location / {
			# 可以写相对路径，相对于nginx的根目录
			root ip;
			index ip.html;
		}
	}
	
	# ====================================基于端口的虚拟主机配置=============================================	
	
		server{
		# 监听端口
		listen		81;
		# 监听域名，会根据请求的域名进行匹配
		server_name node;
		
		location / {
			# 可以写相对路径，相对于nginx的根目录
			root node81;
			index node81.html;
		}
	}
	
	
	# ====================================如下是NGINX的自带默认配置=============================================	
	# server就是虚拟主机
    server {
		# 监听端口
        listen       80;
		# 监听的域名
        server_name  localhost;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  daxin.html index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
